#!/usr/bin/env /bin/bash

# This script helps clean up tvseries.
# It's not perfect, but with a little work it can
# save you much time getting episodes named and sorted.
# It will lookup episodes in the IMDB and parse it to suite
# for filenames.
#
# This script is licenced under GPLv2 and later.
# http://www.gnu.org/licenses/gpl.html
#
# Feel free to contact me if you have suggestions
# thomas AT gstaedtner DOT net


# Supported shells: zsh, bash
# Ksh runs in a error condition, looks like a problem with the
# temp files. Fix it and send me a patch if you want.
# Almquist shells and C shells won't work.
# On some systems you might replace the echo -e with echo
# (looks uglier but works), and maybe sed -s won't work on
# every system.
# BSD users should get and use bash,
# others should be fine with bash or zsh (just change the shebang).

# Support for more languages will come, now that IMDB is
# available in other languages.
 

SEASON=$1
FILEENDING=$2
NAME=$3
EPISODES=$(ls *$FILEENDING|wc -l)
IMDB_URL=http://www.imdb.com/
#IMDB_URL=http://www.imdb.de/

function print_help
{
	echo -e "Call: tvseries_rename SEASON FILEENDING NAME"
	echo
	echo -e "That are the needed arguments:"
	echo
	echo -e "\t1) Seasonnumber:\tOnly for nameing purpose"
	echo -e "\t2) Fileending:\t\te.g. \".avi\" or \".mkv\""
	echo -e "\t3) Name:\t\tName of the series. Used for IMDB lookup"
	echo
	echo -e "Other arguements:"
	echo -e "\t-h, --help\t\tprints this help"
	echo
	echo -e "The file has to contain an \"E\" followed by the episode number."
	echo -e "There has to be a file named \"list.txt\" that contains one"
	echo -e "line per episode (starting at line 1) with the title"
	echo -e "in a form like this:"
	echo
	echo -e "\tfoo bar: TITLE"
	echo
	echo -e "If there is no \"list.txt\" in the current folder the script"
	echo -e "will try to access IMDB to create the list automatically."
	echo -e "For now this will only work with english series."
	echo
	echo -e "Example:"
	echo
	echo -e "\t./tvseries_rename 03 .avi \"Yet Another TV-Show\""
	echo 
	echo -e "This will rename all files ending on .avi by the lines"
	echo -e "of the list.txt-file in the same folder (which will be"
    echo -e "most likely autogenerated from IMDB if you wish so)."
}

function html2utf
{
	sed 's/&\(Aacute\|#193\);/Á/g; s/&\(aacute\|#225\);/á/g; s/&\(Acirc\|#194\);/Â/g; s/&\(acirc\|#226\);/â/g; s/&\(acute\|#180\);/´/g; s/&\(aelig\|#230\);/æ/g; s/&\(AElig\|#198\);/Æ/g; s/&\(agrave\|#224\);/à/g; s/&\(Agrave\|#192\);/À/g; s/&\(aring\|#229\);/å/g; s/&\(Aring\|#197\);/Å/g; s/&\(Atilde\|#195\);/Ã/g; s/&\(atilde\|#227\);/ã/g; s/&\(Auml\|#196\);/Ä/g; s/&\(auml\|#228\);/ä/g; s/&\(brvbar\|#166\);/¦/g; s/&\(Ccedil\|#199\);/Ç/g; s/&\(ccedil\|#231\);/ç/g; s/&\(cedil\|#184\);/¸/g; s/&\(cent\|#162\);/¢/g; s/&\(copy\|#169\);/©/g; s/&\(curren\|#164\);/¤/g; s/&\(deg\|#176\);/°/g; s/&\(divide\|#247\);/÷/g; s/&\(Eacute\|#201\);/É/g; s/&\(eacute\|#233\);/é/g; s/&\(ecirc\|#234\);/ê/g; s/&\(Ecirc\|#202\);/Ê/g; s/&\(Egrave\|#200\);/È/g; s/&\(egrave\|#232\);/è/g; s/&\(eth\|#240\);/ð/g; s/&\(ETH\|#208\);/Ð/g; s/&\(Euml\|#203\);/Ë/g; s/&\(euml\|#235\);/ë/g; s/&\(frac12\|#189\);/½/g; s/&\(frac14\|#188\);/¼/g; s/&\(frac34\|#190\);/¾/g; s/&\(Iacute\|#205\);/Í/g; s/&\(iacute\|#237\);/í/g; s/&\(Icirc\|#206\);/Î/g; s/&\(icirc\|#238\);/î/g; s/&\(iexcl\|#161\);/¡/g; s/&\(Igrave\|#204\);/Ì/g; s/&\(igrave\|#236\);/ì/g; s/&\(iquest\|#191\);/¿/g; s/&\(iuml\|#239\);/ï/g; s/&\(Iuml\|#207\);/Ï/g; s/&\(laquo\|#171\);/«/g; s/&\(macr\|#175\);/¯/g; s/&\(micro\|#181\);/µ/g; s/&\(middot\|#183\);/·/g; s/&\(nbsp\|#160\);/ /g; s/&\(not\|#172\);/¬/g; s/&\(Ntilde\|#209\);/Ñ/g; s/&\(ntilde\|#241\);/ñ/g; s/&\(oacute\|#243\);/ó/g; s/&\(Oacute\|#211\);/Ó/g; s/&\(ocirc\|#244\);/ô/g; s/&\(Ocirc\|#212\);/Ô/g; s/&\(ograve\|#242\);/ò/g; s/&\(Ograve\|#210\);/Ò/g; s/&\(ordf\|#170\);/ª/g; s/&\(ordm\|#186\);/º/g; s/&\(oslash\|#248\);/ø/g; s/&\(Oslash\|#216\);/Ø/g; s/&\(Otilde\|#213\);/Õ/g; s/&\(otilde\|#245\);/õ/g; s/&\(ouml\|#246\);/ö/g; s/&\(Ouml\|#214\);/Ö/g; s/&\(para\|#182\);/¶/g; s/&\(plusmn\|#177\);/±/g; s/&\(pound\|#163\);/£/g; s/&\(raquo\|#187\);/»/g; s/&\(reg\|#174\);/®/g; s/&\(sect\|#167\);/§/g; s/&\(shy\|#173\);/­/g; s/&\(sup1\|#185\);/¹/g; s/&\(sup2\|#178\);/²/g; s/&\(sup3\|#179\);/³/g; s/&\(szlig\|#223\);/ß/g; s/&\(THORN\|#222\);/Þ/g; s/&\(thorn\|#254\);/þ/g; s/&\(times\|#215\);/×/g; s/&\(Uacute\|#218\);/Ú/g; s/&\(uacute\|#250\);/ú/g; s/&\(Ucirc\|#219\);/Û/g; s/&\(ucirc\|#251\);/û/g; s/&\(Ugrave\|#217\);/Ù/g; s/&\(ugrave\|#249\);/ù/g; s/&\(uml\|#168\);/¨/g; s/&\(Uuml\|#220\);/Ü/g; s/&\(uuml\|#252\);/ü/g; s/&\(Yacute\|#221\);/Ý/g; s/&\(yacute\|#253\);/ý/g; s/&\(yen\|#165\);/¥/g; s/&\(yuml\|#255\);/ÿ/g' $1
}

case "$1" in
	-h)
		print_help
		exit 0;;
	--help)
		print_help
		exit 0;;
esac

if [ $# != 3 ]
then
	echo -e "Sorry, but the number of given arguments is not correct."
	echo -e "Please use the correct parameters or the script won't work."
	echo -e "That are the needed arguments:"
	echo
	print_help
	exit 1

else
	if [ ! -e list.txt ]
	then
		IMDB_API_TEMPFILE=$(mktemp)
		IMDB_TEMPFILE=$(mktemp)
        IMDB_ISO_TEMPFILE=$(mktemp)
        IMDB_CLEAN_TEMPFILE=$(mktemp)

        if [ ! $(echo $NAME | grep -e \^tt.......$) ]
        then
    		echo -e "Searching IMDB... This may take several seconds..."
            curl -s $IMDB_URL"find?s=all&q="$(echo $NAME|sed -e 's/ /+/g')"&x=0&y=0" \
                -o $IMDB_API_TEMPFILE
    		grep -s "No Matches." $IMDB_API_TEMPFILE &> /dev/null && echo -e "Error:" &&
    			grep -s "No Matches." $IMDB_API_TEMPFILE | sed -e 's/ *<*\/*b>//g' &&
    			echo -e "Try to find a correct name or create your own list.txt" &&
    			echo -e "Aborting." &&
    			exit 1
    		IMDB_ID=$(grep -m 1 -s "(TV series)" $IMDB_API_TEMPFILE | \
                grep -m 1 -o "\/title\/tt......." | grep -m 1 -o "tt.......")
        else
            IMDB_ID=$NAME
        fi

        if [ ! -s $IMDB_API_TEMPFILE ]
        then
            IMDB_ID=$(curl -s -w %{redirect_url} \
                $IMDB_URL"find?s=all&q="$(echo $NAME|sed -e 's/ /+/g')"&x=0&y=0" | \
                sed -e 's/.*title\///' | sed -e 's/\/.*//')
        fi

		rm -f $IMDB_API_TEMPFILE
		echo -e "Checking IMDB episode list..."
		curl -s $IMDB_URL"title/"$IMDB_ID"/episodes" -o $IMDB_ISO_TEMPFILE
        iconv -f iso8859-1 -t utf8 $IMDB_ISO_TEMPFILE > $IMDB_TEMPFILE
		grep "Season $(echo $SEASON|sed -e 's/0*//'), Episode ..*:" $IMDB_TEMPFILE | \
            sed -e 's/.*\/\">//' |	sed -e 's/<.*//' > $IMDB_CLEAN_TEMPFILE
		html2utf $IMDB_CLEAN_TEMPFILE > list.txt
		rm -f $IMDB_CLEAN_TEMPFILE $IMDB_TEMPFILE $IMDB_ISO_TEMPFILE

	fi
	if [ $(ls *$FILEENDING|wc -l) != $(cat list.txt|wc -l) ]
	then
		echo -e "The number of episodes doesn't match the lines of \"list.txt\"."
		echo -e "Please make sure that this both values match."
		exit 1
	fi
	echo
	echo -e "Season: $SEASON"
	echo -e "Episodes: $EPISODES"
	echo -e "Files: $(echo; ls -m *$FILEENDING)"
	echo -e "All this files will be renamed."
	echo
	echo -e "The renamed files would look like this:"
	for i in $(seq -w $EPISODES);
		do TITLE=$(sed -n $i'p' list.txt | sed 's/^.*: //');
		echo -e 's'$SEASON'e'$i' - '$TITLE''$FILEENDING \ \ \ \ \ \<\= $(ls *E$i*$FILEENDING);
	done
	echo -e "Is this OK? ( yes / no )"
	read CONFIRMATION
	if [ $CONFIRMATION != yes ]
	then
		echo -e "Aborting."
        echo -e "Please remove \"list.txt\" if it is autogenerated."
		exit 0
	fi
	echo -e "Renameing..."
	for i in $(seq -w $EPISODES);
		do TITLE=$(sed -n $i'p' *list.txt | sed 's/^.*: //');
		mv *E$i*$FILEENDING "s$SEASON"e"$i - $TITLE$FILEENDING";
	done
	echo -e "Renaming complete, removing list.txt file."
	rm list.txt
fi
